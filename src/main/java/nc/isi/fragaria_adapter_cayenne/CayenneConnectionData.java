package nc.isi.fragaria_adapter_cayenne;

import nc.isi.fragaria_adapter_rewrite.resources.ConnectionData;
/**
 * 
 * @author bjonathas
 *
 *As we are using Cayenne interface to handle datasources based on relational 
 *databases, the information used to get the data (url, credentials, mapping) 
 *has to be written in an xml configuration file generated by the software 
 *CayenneModeler @see <a href="http://cayenne.apache.org/docs/3.0/modeler-guide</a>.
 *With this software, you create DbEntities and map them to ObjEntity. You neither have 
 *to generate the Cayenne Java class for all ObjEnties (leave the field JavaClass blank)
 *nor to set the custom superclass (leave the field Custom SuperClass blank) as the 
 *CayenneDataObject class will be used by default to instanciate objects.
 *In the case of relational database, ConnectionData are simply the name of this 
 *configuration file (ex : cayenne-conf.xml).
 *
 */

public class CayenneConnectionData implements ConnectionData {
	protected String getConfFileName() {
		return confFileName;
	}

	private final String confFileName;

	public CayenneConnectionData(String datamapName) {
		this.confFileName = datamapName;
	}

}
